'use client';

import React, { useState, useEffect } from 'react';
import '@/app/(authed)/timecard/TimeCard.css';
import './TimeCard.css';

interface dayweek {
  name: string;
  date: Date;
  format: string; // dd/mm/yyyy
  iso: string; // yyyy-mm-dd para buscar cursos
}

interface Curso {
  title: string;
  hours: number;
}

const coursesByDate: { [iso: string]: Curso[] } = {
  '2025-04-26': [
    { title: 'Curso de React', hours: 4 },
    { title: 'Curso de Node.js', hours: 3 },
  ],
  '2025-04-30': [
    { title: 'Curso de TypeScript', hours: 5 },
    { title: 'Curso de MongoDB', hours: 3 },
  ],
};

const obtainweekfrom = (base: Date): dayweek[] => {
  const start = new Date(base);
  start.setDate(base.getDate() - base.getDay()); // domingo
  const days = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];
  const week: dayweek[] = [];

  for (let i = 0; i < 7; i++) {
    const date = new Date(start);
    date.setDate(start.getDate() + i);
    const format = date.toLocaleDateString('es-MX'); // dd/mm/yyyy
    const iso = date.toISOString().split('T')[0]; // yyyy-mm-dd
    week.push({ name: days[i], date, format, iso });
  }

  return week;
};

const TimeCard = () => {
  const actualdate = new Date();
  const [startdate, setFechaBase] = useState<Date>(new Date());
  const [week, setWeek] = useState<dayweek[]>([]);
  const [expanded, setExpanded] = useState<{ [index: number]: boolean }>({});

  useEffect(() => {
    setWeek(obtainweekfrom(startdate));
  }, [startdate]);

  const totalHours = week.reduce((acc, day) => {
    const cursos = coursesByDate[day.iso] || [];
    return acc + cursos.reduce((sum, c) => sum + c.hours, 0);
  }, 0);

  const changeWeek = (days: number) => {
    const newDate = new Date(startdate);
    newDate.setDate(startdate.getDate() + days);
    setFechaBase(newDate);
    setExpanded({});
  };

  const toggleExpand = (index: number) => {
    setExpanded(prev => ({ ...prev, [index]: !prev[index] }));
  };

  const copylastweek = () => alert('Copiar semana pasada (simulado)');
  const fromMondayFriday = () => alert('Aplicar valores (simulado)');
  const DeleteEverything = () => alert('Eliminar todo (simulado)');
  const save = () => alert('Guardado exitosamente (simulado)');
  const send = () => alert('Enviado exitosamente (simulado)');

  const cmonth = actualdate.toLocaleString('es-MX', { month: 'long' });
  const month = cmonth.charAt(0).toUpperCase() + cmonth.slice(1);
  const Weeknumber = week.length
    ? Math.ceil((week[0].date.getTime() - new Date(week[0].date.getFullYear(), 0, 1).getTime()) / (1000 * 60 * 60 * 24 * 7))
    : 0;

  return (
    <div className="timecard-container">
      <div className="timecard-box">
        <div className="header">
          <button className="nav-btn" onClick={() => changeWeek(-7)}>‹ Periodo Anterior</button>
          <h2 className="weekendpayment">
            <strong>Periodo de Pago:</strong> {week[0]?.format} - {week[6]?.format}
          </h2>
          <button className="nav-btn" onClick={() => changeWeek(7)}>Siguiente Periodo ›</button>
        </div>

        <div className="calendar-container">
          <div className="calendar-box">
            <div className="calendar-top">Hoy:</div>
            <div className="calendar-day">{actualdate.getDate()}</div>
            <div className="calendar-bottom">{month}</div>
          </div>
          <div className="status">
            <p><strong>Estatus de Time Card:</strong> No Entregado</p>
            <p><strong>Horas Totales de Time Card:</strong> {totalHours} / 42.5</p>
            <p>
              <strong>Semana:</strong> {Weeknumber} &nbsp;
              <strong>Mes:</strong> {week[1]?.date.getMonth() + 1} &nbsp;
              <strong>Año:</strong> {week[1]?.date.getFullYear()}
            </p>
          </div>
          <div className="dates">
            <div className="date-item">
              <span><strong>Fecha de Entrega:</strong></span>
              <span>N/A</span>
            </div>
            <div className="date-item">
              <span><strong>Fecha de Aprobación:</strong></span>
              <span>N/A</span>
            </div>
          </div>
        </div>

        <table className="hours-table">
          <thead>
            <tr>
              <th>Ver Más</th>
              <th>Día</th>
              <th>Fecha</th>
              <th>Horas total</th>
            </tr>
          </thead>
          <tbody>
            {week.map((dia, index) => {
              const cursos = coursesByDate[dia.iso] || [];
              const horasTotales = cursos.reduce((sum, c) => sum + c.hours, 0);

              return (
                <React.Fragment key={index}>
                  <tr>
                    <td>
                      <input type="checkbox" onClick={() => toggleExpand(index)} />
                    </td>
                    <td>{dia.name}</td>
                    <td>{dia.format}</td>
                    <td>{horasTotales}</td>
                  </tr>
                  {expanded[index] && (
                    <tr>
                      <td></td>
                      <td colSpan={3}>
                        {cursos.length > 0 ? (
                          cursos.map((curso, i) => (
                            <div key={i}><strong>{curso.title}</strong> — {curso.hours} horas</div>
                          ))
                        ) : (
                          <div className="italic text-gray-100">No hay cursos hechos este día.</div>
                        )}
                      </td>
                    </tr>
                  )}
                </React.Fragment>
              );
            })}
          </tbody>
        </table>

        <div className="buttons-bar">
          <label className="custom-checkbox">
            <input type="checkbox" onClick={copylastweek} />
            <span className="checkmark"></span>
            Copia la Semana Pasada
          </label>
          <label className="custom-checkbox">
            <input type="checkbox" onClick={fromMondayFriday} />
            <span className="checkmark"></span>
            ####
          </label>
          <div className="button-group">
            <button className="red" onClick={DeleteEverything}>Eliminar Todo</button>
            <button className="gray" onClick={save}>Guardar</button>
            <button className="blue" onClick={send}>Enviar</button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TimeCard;
